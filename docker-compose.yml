services:

  influxdb:
    networks:
      - "${NETWORK:-web}"
    image: influxdb:2.7
    restart: unless-stopped
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    volumes:
      - ./influxdb-data:/var/lib/influxdb2
    profiles:
      - receive_mqtt
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PWD:-supersecret}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-myorg}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-telegraf}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN:-mytoken}

  telegraf:
    networks:
      - "${NETWORK:-web}"
    image: telegraf:1.34
    restart: unless-stopped
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    profiles:
      - receive_mqtt
    environment:
      MQTT_URL: "${TELEGRAF_MQTT_URL:-ssl://${MQTT_DOMAIN:-mosquitto}:8883}"
      SERVER_DOMAIN: "${SERVER_DOMAIN:-mosquitto}"
      INSECURE_SKIP_VERIFY: "${INSECURE_SKIP_VERIFY_MQTT:-true}"
      MQTT_KEY: "${MQTT_KEY:-mqttpass}"

      INFLUX_URL: ${INFLUXDB_URL:-http://influxdb:8086}
      INFLUX_TOKEN: ${INFLUXDB_TOKEN:-mytoken}
      INFLUX_ORG: ${INFLUXDB_ORG:-myorg}
      INFLUX_BUCKET: ${INFLUXDB_BUCKET:-telegraf}
    depends_on:
      - influxdb

  mosquitto:
    networks:
      - "${NETWORK:-web}"
    image: iegomez/mosquitto-go-auth:3.0.0-mosquitto_2.0.18
    user: root
    entrypoint: >
      sh -c 'mkdir -p /mosquitto/certs && cp /mosquitto/inject-certs/* /mosquitto/certs && chown -R mosquitto:mosquitto /mosquitto/certs && exec su mosquitto -s /bin/sh -c "mosquitto -c /mosquitto/config/mosquitto.conf"'
    restart: unless-stopped
    volumes:
      - ./mosquitto/config:/mosquitto/config:ro
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
      - "${TLS_CERTFILE_PATH:-${TLS_CERT_DIR:-./self-signed-certs/}${TLS_CERTFILE:-fullchain.pem}}:/mosquitto/inject-certs/fullchain.pem:ro"
      - "${TLS_KEYFILE_PATH:-${TLS_CERT_DIR:-./self-signed-certs/}${TLS_KEYFILE:-privkey.pem}}:/mosquitto/inject-certs/privkey.pem:ro"
    profiles:
      - mqtt-broker
    ports:
      - "${MQTTS_PORT:-8883}:8883"

  mongo:
    networks:
      - "${NETWORK:-web}"
    image: mongo:8.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ohno
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PWD:-rootpass}
      MONGO_INITDB_DATABASE: cogniflight
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./mongo-data:/data/db
    profiles:
      - mongo
    ports:
      - "${MONGO_PORT:-27017}:27017"

  ml-engine:
    build: ./ml-engine
    restart: unless-stopped
    networks:
      - "${NETWORK:-web}"
    environment:
      SOCK_FILE: "/sockets/ml-engine.sock"
      MONGO_URI: "${MONGO_URI:-mongodb://ohno:${MONGO_PWD:-rootpass}@mongo:27017/?authSource=admin}"
    develop:
      watch:
        - action: sync+restart
          path: ./ml-engine
          target: /app
    profiles:
      - backend
      - ml-engine
    volumes:
      - ./sockets:/sockets

  backend:
    networks:
      - "${NETWORK:-web}"
    build: ./backend
    restart: unless-stopped
    environment:
      ENV: "${ENV:-development}"
      MONGO_URI: "${MONGO_URI:-mongodb://ohno:${MONGO_PWD:-rootpass}@mongo:27017/?authSource=admin}"
      INFLUX_URL: "${INFLUXDB_URL:-http://influxdb:8086}"
      MQTT_URI: "${MQTTS_URL:-mosquitto:8883}"
      MQTT_INSECURE_SKIP_VERIFY: "${INSECURE_SKIP_VERIFY_MQTT:-true}"
      BOOTSTRAP_USERNAME: "${BOOTSTRAP_USERNAME}"
      BOOTSTRAP_EMAIL: "${BOOTSTRAP_EMAIL}"
      BOOTSTRAP_PHONE: "${BOOTSTRAP_PHONE}"
      BOOTSTRAP_PWD: "${BOOTSTRAP_PWD}"

      SERVER_DOMAIN: "${SERVER_DOMAIN:-localhost}"
      TRUSTED_PROXIES: "${TRUSTED_PROXIES:-frontend}"

      ML_SOCK_FILE: "/sockets/ml-engine.sock"

      MQTT_KEY: "${MQTT_KEY:-mqttpass}"
      OPENAI_API_KEY: "$OPENAI_API_KEY"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${SERVER_DOMAIN:-localhost}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=${TLS_ENTRYPOINT:-websecure}"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=${TLS_CERTRESOLVER:-myresolver}"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"

      # ðŸª„ Path rewrite middleware
      - "traefik.http.middlewares.strip-api-prefix.stripPrefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=strip-api-prefix"

    depends_on:
      - ml-engine
    ports:
      - 8080:8080
    develop:
      watch:
        - action: sync+restart
          path: ./backend
          target: /app
    profiles:
      - backend
      - rest-api
    volumes:
      - ./sockets:/sockets

  frontend:
    networks:
      - "${NETWORK:-web}"
    build: 
      context: ./frontend
      target: "${ENV:-development}"
      args:
        NODE_ENV: "${ENV:-development}"
        # Very likely that this flexibility isn't necessary, just good practice
        API_PREFIX: "${API_PREFIX:-/api}"
    restart: unless-stopped
    environment:
      # This turns the vite frontend into reverse proxy (useful for local dev)
      BACKEND_URL: "${BACKEND_URL:-http://backend:8080}"
      __VITE_ADDITIONAL_SERVER_ALLOWED_HOSTS: "${SERVER_DOMAIN:-localhost}"
      BIND_IP: 0.0.0.0 # Don't change
    ports:
      - 5173:1024
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${SERVER_DOMAIN:-localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=${TLS_ENTRYPOINT:-websecure}"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=${TLS_CERTRESOLVER:-myresolver}"
      - "traefik.http.services.frontend.loadbalancer.server.port=1024"

networks:
  web:
    name: "${NETWORK:-web}"
    external: "${NETWORK_EXTERNAL:-false}"
